<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta http-equiv="imagetoolbar" content="no">
  <link rel="icon" href="/srv/img/favicon.gif" type="image/gif">

<!--additional header info goes here-->
  <meta name="keywords" content="cartography, kartographie, cartographie, map, karte, carte, svg, scalable vector graphics">
  <style type="text/css">
body {background-image:url('http://www.carto.net/srv/img/backmap.gif'); background-repeat:no-repeat; background-color:#ffef95; font-family:Arial,Helvetica,Geneva,sans-serif;color:#B42D25; }

/*B42D25 ~ rgb(180,44,37) bordeauxrot*/
/*161682 ~ rgb(23,23,130) dklblau */
/*168C16 ~ rgb(23,140,23) dklgruen */
/*ffef95 ~ rgb(255,239,149) bg-gelb */

a {text-decoration:underline; color:#168C16; background: transparent}

h2 a {text-decoration:none;}

.inpage { color:#168C16;}
.expage { color:#161682;}

a:visited {text-decoration:none;}


/*
a.inpage:visited {color:#6C6F12; background: transparent}
a.expage:visited {color:#6C125D; background: transparent}
*/

@media screen {  /* hide from IE3 */
a[href]:hover { background: #ffa }
}




.lde {background-image:url('http://www.carto.net/srv/img/back_l_de.gif'); }
.lfr {background-image:url('http://www.carto.net/srv/img/back_l_fr.gif'); }
.len {background-image:url('http://www.carto.net/srv/img/back_l_en.gif'); }
.les {background-image:url('http://www.carto.net/srv/img/back_l_es.gif'); }

.higher { font-weight:bold; } /*TO BE REMOVED*/
.bigger { font-weight:bold; }
.smaller { font-size:small;}

.chrihelptd { background-color:#FFEF95; } /*tabellen hintergrund in christans hilfen sollet allgem hintergrund entsprechen*/

.newspostit { background-color:#f6ffd8;}


p,h1,h2,h3,h4,ul,ol,li,div,td,th,address,blockquote,b,i,.keepnormfontcolor { font-family:Arial,Helvetica,Geneva,sans-serif; color:#B42D25 }
tt,pre { font-family:"Courier New",Courier,monospace; color:#B42D25; }


.info { border:1px solid; background-color:#eeeeee; padding:40px; margin:0px; }
.info tt, .info pre { font-family:"Courier New",Courier,monospace; color:blue; }

  </style>
  <title>carto:net - 

  Example for serverside SVG generation with PHP
</title>
</head>
<body><a name="top"></a>

<table width="100%">
	<tr>
		<td align="left">
			<img src="http://www.carto.net/srv/img/navig.gif" alt="" usemap="#navig" border="0" width="600" height="111">
		</td>
	</tr>
</table>
<!-- ONLY navig.gif IMG NEEDED NORMALLY -->
<map name="navig">
  <area shape="rect" coords="226,14,585,66" href="http://www.carto.net/" target="_top" alt="main page - page initiale - hauptseite - página principal">
  <area shape="rect" coords="272,77,433,106" href="http://www.carto.net/projects/" alt="projects - projets - projekte - proyectos">
  <area shape="rect" coords="454,77,598,106" href="http://www.carto.net/authors/" alt="authors - auteurs - autoren - autores">
  <area shape="rect" coords="130,77,253,106" href="http://www.carto.net/papers/" alt="papers - exposés - berichte - papeles">
  <area shape="rect" coords="25,77,109,106" href="http://www.carto.net/help/" alt="help - aide - hilfe - ayuda">
</map>


<div id="adBarContainer" style="margin-left:13px;float:right;right:8px;width:160px;height:600px;border:0px solid red;">
<script type="text/javascript"><!--
google_ad_client = "pub-6049981187637171";
	/* 160x600, Carto.net Standard */
	google_ad_slot = "4746507232";
	google_ad_width = 160;
	google_ad_height = 600;
//-->
</script>
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>






  <h2 class="sitemap"><a href="/">carto</a><span class="expage">:</span><a href="/papers/">papers</a><span class="expage">:</span><a href="/papers/svg/">svg</a><span class="expage">:</span><a href="/papers/svg/samples/">examples</a><span class="expage">:</span><a href="/papers/svg/samples/#serv">serverside</a><span class="expage">:</span>PHP</h2>

<h2>Example for serverside SVG generation with PHP</h2>

      <table border="0" cellpadding="8" cellspacing="0">
        <TR>
          <td valign="top">
            <embed width="500" height="400" src="serverside_svg_php.psvg" type="image/svg+xml" />
           </td>
          <td valign="top">
            <P>This example shows the use of serverside SVG generation with PHP. It randomly generates 20 rectangles with different positions, sizes and colors. It additionally displays the servers' local date and time, as well as your user-agent.</P>
            <p>Each time you reload the file it will appear different!</p>
            <p>Netscape users: Please disable disk and memory cache in order to have a reload every time.</p>
            <p>Of course, genereting random rectangles doesn't make much sense for cartography and PHP at all, see <a href="http://www.carto.net/papers/svg/samples/mysql_svg_php.shtml">Serverside SVG generation with PHP on MySQL</a> and <a href="http://www.carto.net/papers/svg/samples/mysql_svg_perl.shtml">Serverside SVG generation with Perl on MySQL</a> for database connections. Note that basic server configurations are explained only on this page here.</p>
          </td>
        </TR>
    </table>

      <div class="info">
        <h4>Files used</h4>
          <p>Right-click, save ...</p>
<ul>
              <li><tt><a href="serverside_svg_php.shtml">serverside_svg_php.shtml</a></tt></li>
              <li><tt><a href="serverside_svg_php.psvg.txt">serverside_svg_php.psvg.txt</a></tt> (remove txt-extension after download)</li>
           </ul>

         <h3>Technical Details</h3>
            <p>In order to use PHP in conjunction with SVG you have to do two additions in your webservers config-file. We will describe the Apache case, because it is the most-popular webserver. We assume that PHP is already installed and working correctly. First you need to add the type "psvg" to your mime-type file so that the relevant line reads like <tt>image/svg+xml svg svgz psvg</tt>. The mime-types are usually either located at <tt>/etc/mime.types</tt> or <tt>/etc/httpd/mime.types</tt>. Secondly you have to add an additional SVG-handler in the apache config-file, so that your relevant line reads like: <tt>AddType application/x-httpd-php .php .php4 .phtml .psvg</tt>, assuming you call your php-generated svg-files <tt>.psvg</tt>. The Apache config-file is most likely found at <tt>/etc/httpd/httpd.conf</tt> or <tt>/etc/apache2/apache2.conf</tt>. If you have problems getting PHP up and running then please refer to the <a href="http://www.php.net/" class="expage">PHP documentation</a>.</p>

            <p>We give our file a different extension in order to distinguish it from static SVG-files. In our case we give it the <tt>.psvg</tt>-extension as described above.</p>
            
            <p>PHP allows the inclusion of PHP logic into static SVG-files, thus getting dynamic content into SVG. Data-Sources can be other files, XML, databases or other applications. One can either embed PHP in SVG or vice-versa, quite similar to perl and embedded perl. We first show the complete code and describe it afterwards. PHP-Code is colored in <span style="color:red">red</span>, while regular SVG is in <span style="color:blue">blue</span>. We use here the short hand php syntax, replace <tt>&lt;?</tt> with <tt>&lt;?php</tt> and <tt>&lt;?=</tt> with <tt>&lt;?php echo</tt> or <tt>&lt;?php print</tt> if this file does not work as expected.</p>
<pre>
<span style="color:silver">01 </span><span style="color:red">&lt;?
<span style="color:silver">02 </span>header("Content-type: image/svg+xml");
<span style="color:silver">03 </span>print('</span>&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;<span style="color:red">');
<span style="color:silver">04 </span>$svgwidth=500;
<span style="color:silver">05 </span>$svgheight=400;
<span style="color:silver">06 </span>?&gt;</span>
<span style="color:silver">07 </span>
<span style="color:silver">08 </span>&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN"
                         "http://www.w3.org/TR/SVG/DTD/svg10.dtd"&gt;
<span style="color:silver">09 </span>&lt;svg width="<span style="color:red">&lt;?=$svgwidth;?&gt;</span>px" height="<span style="color:red">&lt;?=$svgheight;?&gt;</span>px"
<span style="color:silver">10 </span>xmlns="http://www.w3.org/2000/svg"&gt;
<span style="color:silver">11 </span>	&lt;desc&gt;This is a php-random rectangle test&lt;/desc&gt;
<span style="color:silver">12 </span><span style="color:red">&lt;?
                         //initalizing random generator
<span style="color:silver">13 </span>srand((double) microtime() * 1000000);
<span style="color:silver">14 </span>for ($i = 0; $i &lt; 20; $i+=1) {
                         //avoid getting a range 0..0 for rand function
<span style="color:silver">15 </span>  $x = floor(rand(0,$svgwidth-1));
<span style="color:silver">16 </span>  $y = floor(rand(0,$svgheight-1));
                         //avoid getting rect outside of viewBox
<span style="color:silver">17 </span>  $width = floor(rand(0,$svgwidth-$x));
<span style="color:silver">18 </span>  $height = floor(rand(0,$svgheight-$y));
<span style="color:silver">19 </span>  $red = floor(rand(0,255));
<span style="color:silver">20 </span>  $blue = floor(rand(0,255));
<span style="color:silver">21 </span>  $green = floor(rand(0,255));
<span style="color:silver">22 </span>  $color = "rgb(".$red.",".$green.",".$blue.")";
<span style="color:silver">23 </span>  print "\t&lt;rect x=\"$x\" y=\"$y\" width=\"$width\" height=\"$height\" 
                        style=\"fill:$color;\"/&gt;\n";
<span style="color:silver">24 </span>}
<span style="color:silver">25 </span>?&gt;</span>
<span style="color:silver">26 </span>  &lt;text x="<span style="color:red">&lt;?=$svgwidth/2;?&gt;</span>px" y="300" style="font-size:15;"
                       text-anchor="middle"&gt;The servers Date and Time is: <span style="color:red">
                       &lt;? print (strftime("%Y-%m-%d, %H:%M:%S")); ?&gt;</span>&lt;/text&gt;
<span style="color:silver">27 </span>  &lt;text x="<span style="color:red">&lt;?=$svgwidth/2;?&gt;</span>px" y="340" style="font-size:15;"
                      text-anchor="middle"&gt;You are running:&lt;/text&gt;
<span style="color:silver">28 </span>  &lt;text x="<span style="color:red">&lt;?=$svgwidth/2;?&gt;</span>px" y="360" style="font-size:15;"
                      text-anchor="middle"&gt;<span style="color:red">
                      &lt;? print $HTTP_USER_AGENT; ?&gt;</span>&lt;/text&gt;
<span style="color:silver">19 </span>&lt;/svg&gt;
</pre>

<p>As you might have noticed we have to use special tags to separate PHP-code from SVG-code. All code within <tt>&lt;?</tt> and <tt>&gt;</tt> is PHP and replaced on the server at runtime when requested, thus sending pure SVG-code to the client.</p>

<p>The first 6 lines send content-type, xml-header and initializes variables. We heave to print the xml-header using PHP, because the xml-header conflicts with the tags responsible for distinguishing SVG and PHP.</p>

<p>Lines 8 to 12 show the stand doctype-declaration, the svg root-element and a description-tag. Note that we use php-variables to replace the width and height-section. PHP variables - similar to perl - start with a dollar-sign.</p>

<p>Lines 13 to 26 initializes the random-generator (using the actual system-time) and embeds a php for-loop. This loops randomly generates x-, y-, with- and height-values for the rectangles, as well als rgb-color-values. With the print-statement we send the output to the client.</p>

<p>Finally we draw three text-elements, writing out the servers current date and time and the user-agent (browser-type) using PHP-functions and environment-variables.</p>

<p>Further resources on PHP:</p>
<ul>
<li><a href="http://www.php.net/" class="expage">Home of PHP</a></li>
<li><a href="http://www.phpbuilder.com/" class="expage">PHP Builder Resources</a></li>
</ul>

<p>The author of this example is a strong supporter of open-source technology and data-formats. Open source servers and daemons are running large parts of the internet infrastructure and are in most cases of high-quality, tested and supported by a very active user-community. Linux, Apache, perl, php, gnu-tools and compilers, kde, gnome, gimp and many more are shining examples of quality and reliability of open-source projects. The power of combining SVG, Javascript, PHP and databases allows to implement nearly all interactive online-services you can think about.</p>
<p>For the GIS and mapping-community the combination of the above techniques with spatial extensions to databases, with spatial queries and analysis seems very promising. Examples: PostgresGIS and Oracle Spatial.</p>
</div>
<br><br><hr>
<table width="100%">
<tr>
<td align="left">Last modified: 

Thursday, 29-May-2008 14:57:49 CEST
<br>&copy; <a href="http://www.carto.net/#en_w3">carto<span class="expage">:</span>net</a> (<a href="http://www.carto.net/neumann/">andreas neumann</a> &amp <a href="/andre.mw/">andr&eacute; m. winter</a>)

<br>original URL for reference: http://www.carto.net/svg/samples/serverside_svg_php.shtml</td>
<td align="right" valign="top"><a class="expage" href="javascript:location.href='http://del.icio.us/post?v=3&amp;url='+encodeURIComponent(location.href)+'&amp;title='+encodeURIComponent(document.title)"><img src="http://images.del.icio.us/static/img/delicious.med.gif" width="16" height="16" align="bottom" alt="del.icio.us"/>&nbsp;Add this page to del.icio.us</a></td>
</tr></table>
</body></html>

